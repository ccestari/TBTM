// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TakeBackTheMusic.Models;

namespace TakeBackTheMusic.Migrations
{
    [DbContext(typeof(TakeBackTheMusicContext))]
    [Migration("20190528204545_PhotoTagsLocations")]
    partial class PhotoTagsLocations
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TakeBackTheMusic.Areas.Identity.Data.TakeBackTheMusicUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("DOB");

                    b.Property<string>("DisplayName");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("TakeBackTheMusic.Models.Artist", b =>
                {
                    b.Property<int>("ArtistID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ArtistCreateDate");

                    b.Property<string>("ArtistDesc");

                    b.Property<string>("ArtistDisplayName")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("ArtistLink")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<bool>("IsPublic");

                    b.Property<string>("OwnerIDId");

                    b.HasKey("ArtistID");

                    b.HasIndex("OwnerIDId");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("TakeBackTheMusic.Models.Countries", b =>
                {
                    b.Property<int>("CountryID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Country2ISO");

                    b.Property<string>("Country3ISO");

                    b.Property<DateTime>("CountryLastUpdated");

                    b.Property<string>("CountryName");

                    b.HasKey("CountryID");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("TakeBackTheMusic.Models.Event", b =>
                {
                    b.Property<int>("EventID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EventCreateDate");

                    b.Property<string>("EventCreatorId");

                    b.Property<string>("EventDescription");

                    b.Property<DateTime>("EventEnd");

                    b.Property<string>("EventName");

                    b.Property<DateTime>("EventStart");

                    b.Property<bool>("IsPrivate");

                    b.Property<string>("TicketLink");

                    b.Property<decimal>("TicketPrice");

                    b.HasKey("EventID");

                    b.HasIndex("EventCreatorId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("TakeBackTheMusic.Models.EventArtist", b =>
                {
                    b.Property<int>("EventArtistId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ArtistID1");

                    b.Property<DateTime>("ArtistStart");

                    b.Property<int>("EventID");

                    b.HasKey("EventArtistId");

                    b.HasIndex("ArtistID1");

                    b.HasIndex("EventID");

                    b.ToTable("EventArtist");
                });

            modelBuilder.Entity("TakeBackTheMusic.Models.Genre", b =>
                {
                    b.Property<int>("GenreID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("GenreDateAdded");

                    b.Property<string>("GenreDescription")
                        .HasMaxLength(256);

                    b.Property<string>("GenreName")
                        .HasMaxLength(50);

                    b.Property<DateTime>("GenreUpdatedDate");

                    b.HasKey("GenreID");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("TakeBackTheMusic.Models.Photos", b =>
                {
                    b.Property<Guid>("PhotoID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDelete");

                    b.Property<DateTime>("LastUpdated")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("PhotoCaption");

                    b.Property<string>("PhotoFilePath");

                    b.Property<string>("PhotoOwnerIDId");

                    b.Property<DateTime>("PhotoUploadTime")
                        .ValueGeneratedOnAdd();

                    b.HasKey("PhotoID");

                    b.HasIndex("PhotoOwnerIDId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("TakeBackTheMusic.Models.Venues", b =>
                {
                    b.Property<int>("VenueID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsVerified");

                    b.Property<string>("VenueName");

                    b.HasKey("VenueID");

                    b.ToTable("Venues");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TakeBackTheMusic.Areas.Identity.Data.TakeBackTheMusicUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TakeBackTheMusic.Areas.Identity.Data.TakeBackTheMusicUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TakeBackTheMusic.Areas.Identity.Data.TakeBackTheMusicUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TakeBackTheMusic.Areas.Identity.Data.TakeBackTheMusicUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TakeBackTheMusic.Models.Artist", b =>
                {
                    b.HasOne("TakeBackTheMusic.Areas.Identity.Data.TakeBackTheMusicUser", "OwnerID")
                        .WithMany()
                        .HasForeignKey("OwnerIDId");
                });

            modelBuilder.Entity("TakeBackTheMusic.Models.Event", b =>
                {
                    b.HasOne("TakeBackTheMusic.Areas.Identity.Data.TakeBackTheMusicUser", "EventCreator")
                        .WithMany()
                        .HasForeignKey("EventCreatorId");
                });

            modelBuilder.Entity("TakeBackTheMusic.Models.EventArtist", b =>
                {
                    b.HasOne("TakeBackTheMusic.Models.Artist", "ArtistID")
                        .WithMany()
                        .HasForeignKey("ArtistID1");

                    b.HasOne("TakeBackTheMusic.Models.Event", "Event")
                        .WithMany("EventArtists")
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TakeBackTheMusic.Models.Photos", b =>
                {
                    b.HasOne("TakeBackTheMusic.Areas.Identity.Data.TakeBackTheMusicUser", "PhotoOwnerID")
                        .WithMany()
                        .HasForeignKey("PhotoOwnerIDId");
                });
#pragma warning restore 612, 618
        }
    }
}
